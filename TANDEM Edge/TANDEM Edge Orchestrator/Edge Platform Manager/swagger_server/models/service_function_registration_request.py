# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.autoscaling_policy import AutoscalingPolicy  # noqa: F401,E501
from swagger_server.models.env_parameter_name import EnvParameterName  # noqa: F401,E501
from swagger_server.models.volume import Volume  # noqa: F401,E501
from swagger_server import util


class ServiceFunctionRegistrationRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, service_function_name: str=None, service_function_image: str=None, service_function_type: str=None, application_ports: List[int]=None, autoscaling_policies: List[AutoscalingPolicy]=None, required_volumes: List[Volume]=None, required_env_parameters: List[EnvParameterName]=None, privileged: bool=None):  # noqa: E501
        """ServiceFunctionRegistrationRequest - a model defined in Swagger

        :param service_function_name: The service_function_name of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type service_function_name: str
        :param service_function_image: The service_function_image of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type service_function_image: str
        :param service_function_type: The service_function_type of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type service_function_type: str
        :param application_ports: The application_ports of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type application_ports: List[int]
        :param autoscaling_policies: The autoscaling_policies of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type autoscaling_policies: List[AutoscalingPolicy]
        :param required_volumes: The required_volumes of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type required_volumes: List[Volume]
        :param required_env_parameters: The required_env_parameters of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type required_env_parameters: List[EnvParameterName]
        :param privileged: The privileged of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :type privileged: bool
        """
        self.swagger_types = {
            'service_function_name': str,
            'service_function_image': str,
            'service_function_type': str,
            'application_ports': List[int],
            'autoscaling_policies': List[AutoscalingPolicy],
            'required_volumes': List[Volume],
            'required_env_parameters': List[EnvParameterName],
            'privileged': bool
        }

        self.attribute_map = {
            'service_function_name': 'service_function_name',
            'service_function_image': 'service_function_image',
            'service_function_type': 'service_function_type',
            'application_ports': 'application_ports',
            'autoscaling_policies': 'autoscaling_policies',
            'required_volumes': 'required_volumes',
            'required_env_parameters': 'required_env_parameters',
            'privileged': 'privileged'
        }
        self._service_function_name = service_function_name
        self._service_function_image = service_function_image
        self._service_function_type = service_function_type
        self._application_ports = application_ports
        self._autoscaling_policies = autoscaling_policies
        self._required_volumes = required_volumes
        self._required_env_parameters = required_env_parameters
        self._privileged = privileged

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceFunctionRegistrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceFunctionRegistrationRequest of this ServiceFunctionRegistrationRequest.  # noqa: E501
        :rtype: ServiceFunctionRegistrationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_function_name(self) -> str:
        """Gets the service_function_name of this ServiceFunctionRegistrationRequest.


        :return: The service_function_name of this ServiceFunctionRegistrationRequest.
        :rtype: str
        """
        return self._service_function_name

    @service_function_name.setter
    def service_function_name(self, service_function_name: str):
        """Sets the service_function_name of this ServiceFunctionRegistrationRequest.


        :param service_function_name: The service_function_name of this ServiceFunctionRegistrationRequest.
        :type service_function_name: str
        """

        self._service_function_name = service_function_name

    @property
    def service_function_image(self) -> str:
        """Gets the service_function_image of this ServiceFunctionRegistrationRequest.


        :return: The service_function_image of this ServiceFunctionRegistrationRequest.
        :rtype: str
        """
        return self._service_function_image

    @service_function_image.setter
    def service_function_image(self, service_function_image: str):
        """Sets the service_function_image of this ServiceFunctionRegistrationRequest.


        :param service_function_image: The service_function_image of this ServiceFunctionRegistrationRequest.
        :type service_function_image: str
        """

        self._service_function_image = service_function_image

    @property
    def service_function_type(self) -> str:
        """Gets the service_function_type of this ServiceFunctionRegistrationRequest.


        :return: The service_function_type of this ServiceFunctionRegistrationRequest.
        :rtype: str
        """
        return self._service_function_type

    @service_function_type.setter
    def service_function_type(self, service_function_type: str):
        """Sets the service_function_type of this ServiceFunctionRegistrationRequest.


        :param service_function_type: The service_function_type of this ServiceFunctionRegistrationRequest.
        :type service_function_type: str
        """

        self._service_function_type = service_function_type

    @property
    def application_ports(self) -> List[int]:
        """Gets the application_ports of this ServiceFunctionRegistrationRequest.


        :return: The application_ports of this ServiceFunctionRegistrationRequest.
        :rtype: List[int]
        """
        return self._application_ports

    @application_ports.setter
    def application_ports(self, application_ports: List[int]):
        """Sets the application_ports of this ServiceFunctionRegistrationRequest.


        :param application_ports: The application_ports of this ServiceFunctionRegistrationRequest.
        :type application_ports: List[int]
        """

        self._application_ports = application_ports

    @property
    def autoscaling_policies(self) -> List[AutoscalingPolicy]:
        """Gets the autoscaling_policies of this ServiceFunctionRegistrationRequest.


        :return: The autoscaling_policies of this ServiceFunctionRegistrationRequest.
        :rtype: List[AutoscalingPolicy]
        """
        return self._autoscaling_policies

    @autoscaling_policies.setter
    def autoscaling_policies(self, autoscaling_policies: List[AutoscalingPolicy]):
        """Sets the autoscaling_policies of this ServiceFunctionRegistrationRequest.


        :param autoscaling_policies: The autoscaling_policies of this ServiceFunctionRegistrationRequest.
        :type autoscaling_policies: List[AutoscalingPolicy]
        """

        self._autoscaling_policies = autoscaling_policies

    @property
    def required_volumes(self) -> List[Volume]:
        """Gets the required_volumes of this ServiceFunctionRegistrationRequest.


        :return: The required_volumes of this ServiceFunctionRegistrationRequest.
        :rtype: List[Volume]
        """
        return self._required_volumes

    @required_volumes.setter
    def required_volumes(self, required_volumes: List[Volume]):
        """Sets the required_volumes of this ServiceFunctionRegistrationRequest.


        :param required_volumes: The required_volumes of this ServiceFunctionRegistrationRequest.
        :type required_volumes: List[Volume]
        """

        self._required_volumes = required_volumes

    @property
    def required_env_parameters(self) -> List[EnvParameterName]:
        """Gets the required_env_parameters of this ServiceFunctionRegistrationRequest.


        :return: The required_env_parameters of this ServiceFunctionRegistrationRequest.
        :rtype: List[EnvParameterName]
        """
        return self._required_env_parameters

    @required_env_parameters.setter
    def required_env_parameters(self, required_env_parameters: List[EnvParameterName]):
        """Sets the required_env_parameters of this ServiceFunctionRegistrationRequest.


        :param required_env_parameters: The required_env_parameters of this ServiceFunctionRegistrationRequest.
        :type required_env_parameters: List[EnvParameterName]
        """

        self._required_env_parameters = required_env_parameters

    @property
    def privileged(self) -> bool:
        """Gets the privileged of this ServiceFunctionRegistrationRequest.


        :return: The privileged of this ServiceFunctionRegistrationRequest.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged: bool):
        """Sets the privileged of this ServiceFunctionRegistrationRequest.


        :param privileged: The privileged of this ServiceFunctionRegistrationRequest.
        :type privileged: bool
        """

        self._privileged = privileged