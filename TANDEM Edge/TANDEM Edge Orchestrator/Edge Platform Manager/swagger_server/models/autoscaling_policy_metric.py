# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AutoscalingPolicyMetric(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, metric: str=None, limit: str=None, request: str=None, util_percent: float=None, is_default: bool=None):  # noqa: E501
        """AutoscalingPolicyMetric - a model defined in Swagger

        :param metric: The metric of this AutoscalingPolicyMetric.  # noqa: E501
        :type metric: str
        :param limit: The limit of this AutoscalingPolicyMetric.  # noqa: E501
        :type limit: str
        :param request: The request of this AutoscalingPolicyMetric.  # noqa: E501
        :type request: str
        :param util_percent: The util_percent of this AutoscalingPolicyMetric.  # noqa: E501
        :type util_percent: float
        :param is_default: The is_default of this AutoscalingPolicyMetric.  # noqa: E501
        :type is_default: bool
        """
        self.swagger_types = {
            'metric': str,
            'limit': str,
            'request': str,
            'util_percent': float,
            'is_default': bool
        }

        self.attribute_map = {
            'metric': 'metric',
            'limit': 'limit',
            'request': 'request',
            'util_percent': 'util_percent',
            'is_default': 'is_default'
        }
        self._metric = metric
        self._limit = limit
        self._request = request
        self._util_percent = util_percent
        self._is_default = is_default

    @classmethod
    def from_dict(cls, dikt) -> 'AutoscalingPolicyMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The autoscaling_policy_metric of this AutoscalingPolicyMetric.  # noqa: E501
        :rtype: AutoscalingPolicyMetric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self) -> str:
        """Gets the metric of this AutoscalingPolicyMetric.


        :return: The metric of this AutoscalingPolicyMetric.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric: str):
        """Sets the metric of this AutoscalingPolicyMetric.


        :param metric: The metric of this AutoscalingPolicyMetric.
        :type metric: str
        """

        self._metric = metric

    @property
    def limit(self) -> str:
        """Gets the limit of this AutoscalingPolicyMetric.


        :return: The limit of this AutoscalingPolicyMetric.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit: str):
        """Sets the limit of this AutoscalingPolicyMetric.


        :param limit: The limit of this AutoscalingPolicyMetric.
        :type limit: str
        """

        self._limit = limit

    @property
    def request(self) -> str:
        """Gets the request of this AutoscalingPolicyMetric.


        :return: The request of this AutoscalingPolicyMetric.
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request: str):
        """Sets the request of this AutoscalingPolicyMetric.


        :param request: The request of this AutoscalingPolicyMetric.
        :type request: str
        """

        self._request = request

    @property
    def util_percent(self) -> float:
        """Gets the util_percent of this AutoscalingPolicyMetric.


        :return: The util_percent of this AutoscalingPolicyMetric.
        :rtype: float
        """
        return self._util_percent

    @util_percent.setter
    def util_percent(self, util_percent: float):
        """Sets the util_percent of this AutoscalingPolicyMetric.


        :param util_percent: The util_percent of this AutoscalingPolicyMetric.
        :type util_percent: float
        """

        self._util_percent = util_percent

    @property
    def is_default(self) -> bool:
        """Gets the is_default of this AutoscalingPolicyMetric.


        :return: The is_default of this AutoscalingPolicyMetric.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default: bool):
        """Sets the is_default of this AutoscalingPolicyMetric.


        :param is_default: The is_default of this AutoscalingPolicyMetric.
        :type is_default: bool
        """

        self._is_default = is_default
