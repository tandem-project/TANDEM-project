# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.service_liveness_info_time_stamp import ServiceLivenessInfoTimeStamp  # noqa: F401,E501
from swagger_server.models.service_state import ServiceState  # noqa: F401,E501
from swagger_server import util


class ServiceLivenessInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, state: ServiceState=None, time_stamp: ServiceLivenessInfoTimeStamp=None, interval: int=None):  # noqa: E501
        """ServiceLivenessInfo - a model defined in Swagger

        :param state: The state of this ServiceLivenessInfo.  # noqa: E501
        :type state: ServiceState
        :param time_stamp: The time_stamp of this ServiceLivenessInfo.  # noqa: E501
        :type time_stamp: ServiceLivenessInfoTimeStamp
        :param interval: The interval of this ServiceLivenessInfo.  # noqa: E501
        :type interval: int
        """
        self.swagger_types = {
            'state': ServiceState,
            'time_stamp': ServiceLivenessInfoTimeStamp,
            'interval': int
        }

        self.attribute_map = {
            'state': 'state',
            'time_stamp': 'timeStamp',
            'interval': 'interval'
        }
        self._state = state
        self._time_stamp = time_stamp
        self._interval = interval

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceLivenessInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceLivenessInfo of this ServiceLivenessInfo.  # noqa: E501
        :rtype: ServiceLivenessInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self) -> ServiceState:
        """Gets the state of this ServiceLivenessInfo.


        :return: The state of this ServiceLivenessInfo.
        :rtype: ServiceState
        """
        return self._state

    @state.setter
    def state(self, state: ServiceState):
        """Sets the state of this ServiceLivenessInfo.


        :param state: The state of this ServiceLivenessInfo.
        :type state: ServiceState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def time_stamp(self) -> ServiceLivenessInfoTimeStamp:
        """Gets the time_stamp of this ServiceLivenessInfo.


        :return: The time_stamp of this ServiceLivenessInfo.
        :rtype: ServiceLivenessInfoTimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: ServiceLivenessInfoTimeStamp):
        """Sets the time_stamp of this ServiceLivenessInfo.


        :param time_stamp: The time_stamp of this ServiceLivenessInfo.
        :type time_stamp: ServiceLivenessInfoTimeStamp
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def interval(self) -> int:
        """Gets the interval of this ServiceLivenessInfo.

        The interval (in seconds) between two consecutive \"heartbeat\" messages (see clause 8.2.10.3.3) that MEC platform has determined.  # noqa: E501

        :return: The interval of this ServiceLivenessInfo.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval: int):
        """Sets the interval of this ServiceLivenessInfo.

        The interval (in seconds) between two consecutive \"heartbeat\" messages (see clause 8.2.10.3.3) that MEC platform has determined.  # noqa: E501

        :param interval: The interval of this ServiceLivenessInfo.
        :type interval: int
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval
