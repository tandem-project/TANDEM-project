# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.link_type import LinkType  # noqa: F401,E501
from swagger_server.models.service_availability_notification_change_type import ServiceAvailabilityNotificationChangeType  # noqa: F401,E501
from swagger_server.models.service_state import ServiceState  # noqa: F401,E501
from swagger_server import util


class ServiceAvailabilityNotificationServiceReferences(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, link: LinkType=None, ser_name: str=None, ser_instance_id: str=None, state: ServiceState=None, change_type: ServiceAvailabilityNotificationChangeType=None):  # noqa: E501
        """ServiceAvailabilityNotificationServiceReferences - a model defined in Swagger

        :param link: The link of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type link: LinkType
        :param ser_name: The ser_name of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type ser_name: str
        :param ser_instance_id: The ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type ser_instance_id: str
        :param state: The state of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type state: ServiceState
        :param change_type: The change_type of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type change_type: ServiceAvailabilityNotificationChangeType
        """
        self.swagger_types = {
            'link': LinkType,
            'ser_name': str,
            'ser_instance_id': str,
            'state': ServiceState,
            'change_type': ServiceAvailabilityNotificationChangeType
        }

        self.attribute_map = {
            'link': 'link',
            'ser_name': 'serName',
            'ser_instance_id': 'serInstanceId',
            'state': 'state',
            'change_type': 'changeType'
        }
        self._link = link
        self._ser_name = ser_name
        self._ser_instance_id = ser_instance_id
        self._state = state
        self._change_type = change_type

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceAvailabilityNotificationServiceReferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceAvailabilityNotification.ServiceReferences of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :rtype: ServiceAvailabilityNotificationServiceReferences
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link(self) -> LinkType:
        """Gets the link of this ServiceAvailabilityNotificationServiceReferences.


        :return: The link of this ServiceAvailabilityNotificationServiceReferences.
        :rtype: LinkType
        """
        return self._link

    @link.setter
    def link(self, link: LinkType):
        """Sets the link of this ServiceAvailabilityNotificationServiceReferences.


        :param link: The link of this ServiceAvailabilityNotificationServiceReferences.
        :type link: LinkType
        """

        self._link = link

    @property
    def ser_name(self) -> str:
        """Gets the ser_name of this ServiceAvailabilityNotificationServiceReferences.

        The name of the service. This is how the service producing MEC application identifies the service instance it produces.  # noqa: E501

        :return: The ser_name of this ServiceAvailabilityNotificationServiceReferences.
        :rtype: str
        """
        return self._ser_name

    @ser_name.setter
    def ser_name(self, ser_name: str):
        """Sets the ser_name of this ServiceAvailabilityNotificationServiceReferences.

        The name of the service. This is how the service producing MEC application identifies the service instance it produces.  # noqa: E501

        :param ser_name: The ser_name of this ServiceAvailabilityNotificationServiceReferences.
        :type ser_name: str
        """
        if ser_name is None:
            raise ValueError("Invalid value for `ser_name`, must not be `None`")  # noqa: E501

        self._ser_name = ser_name

    @property
    def ser_instance_id(self) -> str:
        """Gets the ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.

        Identifier of the service instance assigned by the MEC platform.  # noqa: E501

        :return: The ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.
        :rtype: str
        """
        return self._ser_instance_id

    @ser_instance_id.setter
    def ser_instance_id(self, ser_instance_id: str):
        """Sets the ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.

        Identifier of the service instance assigned by the MEC platform.  # noqa: E501

        :param ser_instance_id: The ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.
        :type ser_instance_id: str
        """
        if ser_instance_id is None:
            raise ValueError("Invalid value for `ser_instance_id`, must not be `None`")  # noqa: E501

        self._ser_instance_id = ser_instance_id

    @property
    def state(self) -> ServiceState:
        """Gets the state of this ServiceAvailabilityNotificationServiceReferences.


        :return: The state of this ServiceAvailabilityNotificationServiceReferences.
        :rtype: ServiceState
        """
        return self._state

    @state.setter
    def state(self, state: ServiceState):
        """Sets the state of this ServiceAvailabilityNotificationServiceReferences.


        :param state: The state of this ServiceAvailabilityNotificationServiceReferences.
        :type state: ServiceState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def change_type(self) -> ServiceAvailabilityNotificationChangeType:
        """Gets the change_type of this ServiceAvailabilityNotificationServiceReferences.


        :return: The change_type of this ServiceAvailabilityNotificationServiceReferences.
        :rtype: ServiceAvailabilityNotificationChangeType
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type: ServiceAvailabilityNotificationChangeType):
        """Sets the change_type of this ServiceAvailabilityNotificationServiceReferences.


        :param change_type: The change_type of this ServiceAvailabilityNotificationServiceReferences.
        :type change_type: ServiceAvailabilityNotificationChangeType
        """
        if change_type is None:
            raise ValueError("Invalid value for `change_type`, must not be `None`")  # noqa: E501

        self._change_type = change_type
