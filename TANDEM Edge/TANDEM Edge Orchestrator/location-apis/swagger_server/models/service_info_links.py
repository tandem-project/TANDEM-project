# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.link_type import LinkType  # noqa: F401,E501
from swagger_server import util


class ServiceInfoLinks(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _self: LinkType=None, liveness: LinkType=None):  # noqa: E501
        """ServiceInfoLinks - a model defined in Swagger

        :param _self: The _self of this ServiceInfoLinks.  # noqa: E501
        :type _self: LinkType
        :param liveness: The liveness of this ServiceInfoLinks.  # noqa: E501
        :type liveness: LinkType
        """
        self.swagger_types = {
            '_self': LinkType,
            'liveness': LinkType
        }

        self.attribute_map = {
            '_self': 'self',
            'liveness': 'liveness'
        }
        self.__self = _self
        self._liveness = liveness

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceInfoLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceInfo__links of this ServiceInfoLinks.  # noqa: E501
        :rtype: ServiceInfoLinks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _self(self) -> LinkType:
        """Gets the _self of this ServiceInfoLinks.


        :return: The _self of this ServiceInfoLinks.
        :rtype: LinkType
        """
        return self.__self

    @_self.setter
    def _self(self, _self: LinkType):
        """Sets the _self of this ServiceInfoLinks.


        :param _self: The _self of this ServiceInfoLinks.
        :type _self: LinkType
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    @property
    def liveness(self) -> LinkType:
        """Gets the liveness of this ServiceInfoLinks.


        :return: The liveness of this ServiceInfoLinks.
        :rtype: LinkType
        """
        return self._liveness

    @liveness.setter
    def liveness(self, liveness: LinkType):
        """Sets the liveness of this ServiceInfoLinks.


        :param liveness: The liveness of this ServiceInfoLinks.
        :type liveness: LinkType
        """

        self._liveness = liveness
