# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EopDInterconnectivitySupport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, tunnelling: str=None):  # noqa: E501
        """EopDInterconnectivitySupport - a model defined in Swagger

        :param tunnelling: The tunnelling of this EopDInterconnectivitySupport.  # noqa: E501
        :type tunnelling: str
        """
        self.swagger_types = {
            'tunnelling': str
        }

        self.attribute_map = {
            'tunnelling': 'tunnelling'
        }
        self._tunnelling = tunnelling

    @classmethod
    def from_dict(cls, dikt) -> 'EopDInterconnectivitySupport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The eopD_interconnectivitySupport of this EopDInterconnectivitySupport.  # noqa: E501
        :rtype: EopDInterconnectivitySupport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tunnelling(self) -> str:
        """Gets the tunnelling of this EopDInterconnectivitySupport.


        :return: The tunnelling of this EopDInterconnectivitySupport.
        :rtype: str
        """
        return self._tunnelling

    @tunnelling.setter
    def tunnelling(self, tunnelling: str):
        """Sets the tunnelling of this EopDInterconnectivitySupport.


        :param tunnelling: The tunnelling of this EopDInterconnectivitySupport.
        :type tunnelling: str
        """
        allowed_values = ["gre", "vxlan", "gtp_u"]  # noqa: E501
        if tunnelling not in allowed_values:
            raise ValueError(
                "Invalid value for `tunnelling` ({0}), must be one of {1}"
                .format(tunnelling, allowed_values)
            )

        self._tunnelling = tunnelling
