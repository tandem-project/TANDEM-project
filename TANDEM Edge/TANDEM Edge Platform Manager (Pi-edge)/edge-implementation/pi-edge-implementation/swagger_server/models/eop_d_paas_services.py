# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.eop_d_configurability import EopDConfigurability  # noqa: F401,E501
from swagger_server import util


class EopDPaasServices(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, paas_name: str=None, paas_type: str=None, scale_out: bool=None, configurability: EopDConfigurability=None):  # noqa: E501
        """EopDPaasServices - a model defined in Swagger

        :param paas_name: The paas_name of this EopDPaasServices.  # noqa: E501
        :type paas_name: str
        :param paas_type: The paas_type of this EopDPaasServices.  # noqa: E501
        :type paas_type: str
        :param scale_out: The scale_out of this EopDPaasServices.  # noqa: E501
        :type scale_out: bool
        :param configurability: The configurability of this EopDPaasServices.  # noqa: E501
        :type configurability: EopDConfigurability
        """
        self.swagger_types = {
            'paas_name': str,
            'paas_type': str,
            'scale_out': bool,
            'configurability': EopDConfigurability
        }

        self.attribute_map = {
            'paas_name': 'paasName',
            'paas_type': 'paasType',
            'scale_out': 'scaleOut',
            'configurability': 'configurability'
        }
        self._paas_name = paas_name
        self._paas_type = paas_type
        self._scale_out = scale_out
        self._configurability = configurability

    @classmethod
    def from_dict(cls, dikt) -> 'EopDPaasServices':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The eopD_paasServices of this EopDPaasServices.  # noqa: E501
        :rtype: EopDPaasServices
        """
        return util.deserialize_model(dikt, cls)

    @property
    def paas_name(self) -> str:
        """Gets the paas_name of this EopDPaasServices.


        :return: The paas_name of this EopDPaasServices.
        :rtype: str
        """
        return self._paas_name

    @paas_name.setter
    def paas_name(self, paas_name: str):
        """Sets the paas_name of this EopDPaasServices.


        :param paas_name: The paas_name of this EopDPaasServices.
        :type paas_name: str
        """

        self._paas_name = paas_name

    @property
    def paas_type(self) -> str:
        """Gets the paas_type of this EopDPaasServices.


        :return: The paas_type of this EopDPaasServices.
        :rtype: str
        """
        return self._paas_type

    @paas_type.setter
    def paas_type(self, paas_type: str):
        """Sets the paas_type of this EopDPaasServices.


        :param paas_type: The paas_type of this EopDPaasServices.
        :type paas_type: str
        """

        self._paas_type = paas_type

    @property
    def scale_out(self) -> bool:
        """Gets the scale_out of this EopDPaasServices.


        :return: The scale_out of this EopDPaasServices.
        :rtype: bool
        """
        return self._scale_out

    @scale_out.setter
    def scale_out(self, scale_out: bool):
        """Sets the scale_out of this EopDPaasServices.


        :param scale_out: The scale_out of this EopDPaasServices.
        :type scale_out: bool
        """

        self._scale_out = scale_out

    @property
    def configurability(self) -> EopDConfigurability:
        """Gets the configurability of this EopDPaasServices.


        :return: The configurability of this EopDPaasServices.
        :rtype: EopDConfigurability
        """
        return self._configurability

    @configurability.setter
    def configurability(self, configurability: EopDConfigurability):
        """Sets the configurability of this EopDPaasServices.


        :param configurability: The configurability of this EopDPaasServices.
        :type configurability: EopDConfigurability
        """

        self._configurability = configurability
